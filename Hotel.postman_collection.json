{
	"info": {
		"_postman_id": "ac370d59-1d58-49c5-a434-8b38e6f5e8f6",
		"name": "Hotel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31091675"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.accessToken).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.tokenType).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"AccessToken is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"TokenType is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.tokenType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TokenType should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \n\"email\":\"test@yopmail.com\",  \n\"password\":\"test\"  \n}  ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \n\"name\":\"Test2\",  \n\"lastName\":\"Test\",  \n\"birthday\":\"1998-10-06\",\n\"address\":\"test\",  \n\"zipCode\": \"59000\",  \n\"city\":\"Lille\",  \n\"email\":\"test2@yopmail.com\",  \n\"password\":\"test\"  \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "getActualUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Birthday is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'profilPicture' is either null or a valid URL\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.profilPicture).to.satisfy(function (value) {",
							"        return value === null || /^https?:\\/\\/[\\w\\-]+(\\.[\\w\\-]+)+[/#?]?.*$/.test(value);",
							"    }, \"Value should be either null or a valid URL\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/actual",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"actual"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  pm.expect(responseData).to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
							"",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserByEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Birthday is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.birthday).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/email/test@yopmail.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"email",
						"test@yopmail.com"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUserById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"  pm.response.to.have.status(500);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.path).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/user/id/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user",
						"id",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Hotel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Address is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"City is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Mon Hotel 2\",\n    \"address\": \"118 Avenue Villars\",\n    \"city\": \"59300 Valenciennes\",\n    \"country\": \"France\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam varius libero eget arcu blandit dictum. Suspendisse felis justo, mollis at lobortis et, scelerisque non lectus. Integer faucibus enim quis diam interdum dignissim. Nulla ac aliquet lectus.\",\n    \"pictures\": null,\n    \"openIn\": {\n        \"date\": \"2024-03-07\"\n    },\n    \"openOut\": {\n        \"date\": \"2025-06-03\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/hotel/create",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"hotel",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Hotel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.content).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.content.forEach(function(hotel) {",
							"        pm.expect(hotel.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Address is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.content).to.be.an('array');",
							"    responseData.content.forEach(function (hotel) {",
							"        pm.expect(hotel.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"City is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.content).to.be.an('array');",
							"    responseData.content.forEach(function (hotel) {",
							"        pm.expect(hotel.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"City should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/hotel/get",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"hotel",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Hotel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Date fields are in valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.openIn.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    pm.expect(responseData.openOut.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Pictures field should be an array or null\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.pictures).to.satisfy(function (pictures) {",
							"        return Array.isArray(pictures) || pictures === null;",
							"    }, \"Pictures field should be an array or null\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Mon Hotel 2\",\n    \"address\": \"118 Avenue Villars\",\n    \"city\": \"59300 Valenciennes\",\n    \"country\": \"France\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam varius libero eget arcu blandit dictum. Suspendisse felis justo, mollis at lobortis et, scelerisque non lectus. Integer faucibus enim quis diam interdum dignissim. Nulla ac aliquet lectus.\",\n    \"pictures\": null,\n    \"openIn\": {\n        \"date\": \"2024-03-07\"\n    },\n    \"openOut\": {\n        \"date\": \"2025-06-03\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/hotel/update",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"hotel",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Hotel",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/hotel/delete/Mon Hotel 2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"hotel",
						"delete",
						"Mon Hotel 2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Hotel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Content array is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.content).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"pageNo is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.pageNo).to.exist;",
							"  pm.expect(responseData.pageNo).to.be.a('number');",
							"  pm.expect(responseData.pageNo).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"The pageSize must be a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.pageSize).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.pageSize).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"city\":\"59300 Valenciennes\",\r\n    \"dateIn\":\"2024-03-21\",\r\n    \"dateOut\":\"2024-03-23\",\r\n    \"people\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/hotel/read/filter",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"hotel",
						"read",
						"filter"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJ0ZXN0QHlvcG1haWwuY29tIiwiaWF0IjoxNzA5ODE2NzIyLCJleHAiOjE3MTA0MjE1MjJ9.EPmG4KAlNfXlalXHk1GekyEi7DOMzLZs9koYkvolUE0y2lL5CmKHTlJ0loeP6ePl",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}